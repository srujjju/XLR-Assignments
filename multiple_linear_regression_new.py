# -*- coding: utf-8 -*-
"""Multiple linear regression new

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hoIQLEgc97oQ-d6yrGwzlkRhLgPiMijL
"""

from google.colab import files
uploded = files.upload()

import pandas as pd
file = pd.read_csv('50_Startups.csv')
file.head()

X = file.iloc[:,:-1]
Y = file.iloc[:,-1]

import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(X)
plt.show()

# Calculate correlation matrix
correlation_matrix = file.corr()

# Visualize correlation matrix using heatmap
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.show()

from sklearn.preprocessing import StandardScaler, LabelEncoder
scaler = StandardScaler()
label_encoder = LabelEncoder()
X.iloc[:,:3] = scaler.fit_transform(X.iloc[:,:3])
X.iloc[:,-1] = label_encoder.fit_transform(X.iloc[:,-1])
X.head()

import numpy as np

sns.boxplot(data=X)
plt.show()

from scipy import stats

z_scores = np.abs(stats.zscore(X))

threshold = 3
outlier_indices = np.where(z_scores > threshold)

X_no_outliers = X[(z_scores < threshold).all(axis=1)]
X_no_outliers.head()

from sklearn.linear_model import Lasso, Ridge

lasso = Lasso(alpha=5)
lasso.fit(X, Y)
print("Lasso coefficients:", lasso.coef_)

ridge = Ridge(alpha=2.0)
ridge.fit(X, Y)
print("Ridge coefficients:", ridge.coef_)

import pandas as pd
from statsmodels.stats.outliers_influence import variance_inflation_factor as vif

vif_data = pd.DataFrame()
vif_data["features"] = X.columns
vif_data["VIF Factor"] = [vif(X.values, i) for i in range(X.shape[1])]

print(vif_data)

from sklearn.model_selection  import train_test_split
x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.3)
from sklearn.linear_model import LinearRegression
df = LinearRegression()
df.fit(x_train,y_train)
y_pred_train = df.predict(x_train)
y_pred_test = df.predict(x_test)

from sklearn.metrics import mean_squared_error
import numpy as np
y_pred_train = mean_squared_error(y_train,y_pred_train)
y_pred_test = mean_squared_error(y_test,y_pred_test)
print('root mean squre error for Y pred train',np.sqrt(y_pred_train))
print('root mean squre error for Y pred test',np.sqrt(y_pred_test))

for i in range(100):
  x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.3,random_state = i)
  df = LinearRegression()
  df.fit(x_train,y_train)
  y_pred_train = df.predict(x_train)
  y_pred_test = df.predict(x_test)
  y_pred_train = mean_squared_error(y_train,y_pred_train)
  y_pred_test = mean_squared_error(y_test,y_pred_test)
print('root mean squre error for Y pred train',np.sqrt(y_pred_train))
print('root mean squre error for Y pred test',np.sqrt(y_pred_test))



